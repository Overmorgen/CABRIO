// #region VR_0109 An intermediary which is a legal person must have at least one Effective Leader unless it only has an INCOAA credit license            if (BusinessHelper.AreEffectiveLeadersApplicable(licensedEntity))
            {
                if (licensedEntity.EffectiveLeaders == null)
                {
                    result.AddError(ValidationRuleCode.VR_0109);
                }                SetEffectiveLeaderStatus(licensedEntity.EffectiveLeaders, requestValidations);                var activeEffectiveLeaders = licensedEntity.EffectiveLeaders.Where(el => !PersonStatusesExludedForCount.Contains(el.PersonRoleStatusEnum) && !el.StopDate.HasValue);                var numberOfEffectiveLeaders = activeEffectiveLeaders.Count();
                if (numberOfEffectiveLeaders == 0)
                {
                    result.AddError(ValidationRuleCode.VR_0109);
                }                if (hasActiveCreditLicense && licensedEntity.IsIntermediary)
                {
                    var numberOfEffectiveLeadersActiveInCredit = activeEffectiveLeaders.Count(el => el.IsActiveInCredit);
                    if (numberOfEffectiveLeadersActiveInCredit == 0 && !isOnlyActiveInCreditAsINCOAA)
                    {
                        result.AddError(ValidationRuleCode.VR_CABRIO_1376);
                    }
                    else
                    {
                        var activeDirectors = licensedEntity.Directors.Where(dir => ((dir.Person == null && !dir.PersonRequestId.HasValue) || !PersonStatusesExludedForCount.Contains(dir.PersonRoleStatusEnum))
                                                                                    &&
                                                                                    ((dir.Enterprise == null && !dir.EnterpriseRequestId.HasValue) || !CompanyStatusesExludedForCount.Contains(dir.CompanyRoleStatusEnum))
                                                                                    && !dir.StopDate.HasValue);                        IEnumerable<BM.ResponsibleForDistribution> activeRfds = new List<BM.ResponsibleForDistribution>();
                        IEnumerable<BM.ResponsibleForDistribution> activeRfdsUnderCOO = new List<BM.ResponsibleForDistribution>();
                        IEnumerable<BM.BranchManager> activeBMsUnderCOO = new List<BM.BranchManager>();                        if (activeEffectiveLeaders.Any(el => !el.IsActiveInCredit))
                        {
                            activeRfds = licensedEntityLicensesManagedByCurrentExternalUser.Where(li => li.IsMortgage || li.IsConsumer).SelectMany(li => li.RFDs);
                            activeRfdsUnderCOO = licensedEntityLicensesManagedByCurrentExternalUser.Where(li => li.IsMortgage || li.IsConsumer).SelectMany(li => li.CountriesOfOperation.SelectMany(coo => coo.RFDs));
                            activeBMsUnderCOO = licensedEntityLicensesManagedByCurrentExternalUser.Where(li => li.IsMortgage || li.IsConsumer).SelectMany(li => li.CountriesOfOperation.SelectMany(coo => coo.BranchManagers));
                        }                        foreach (var leader in activeEffectiveLeaders)
                        {
                            if (activeDirectors.Any(d => d.PersonRequestId.HasValue && d.PersonRequestId == leader.PersonRequestId && d.IsActiveInCredit != leader.IsActiveInCredit))
                            {
                                result.AddError(ValidationRuleCode.VR_CABRIO_1374);
                            }                            // VR_CABRIO-1441: An effective leader / director that is marked as not being active in 
                            if (!leader.IsActiveInCredit && (activeRfds.Any(rfd => rfd.PersonRequestId == leader.PersonRequestId && !PersonStatusesExludedForCount.Contains(rfd.PersonRoleStatusEnum)) ||
                                                             activeRfdsUnderCOO.Any(rfd => rfd.PersonRequestId == leader.PersonRequestId && !PersonStatusesExludedForCount.Contains(rfd.PersonRoleStatusEnum)) ||
                                                             activeBMsUnderCOO.Any(bm => bm.PersonRequestId == leader.PersonRequestId && !PersonStatusesExludedForCount.Contains(bm.PersonRoleStatusEnum))))
                            {
                                result.AddError(ValidationRuleCode.VR_CABRIO_1441);
                            }
                        }
                    }
                }
            }            #endregion
